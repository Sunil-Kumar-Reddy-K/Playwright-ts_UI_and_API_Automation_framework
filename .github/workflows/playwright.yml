name: Playwright Tests

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]
  schedule:
    # Run every Monday and Thursday at 5 AM IST (11:30 PM UTC)
    - cron: "30 23 * * 0,3"

jobs:
  ui-tests:
    name: Execute UI Playwright Tests
    runs-on: ubuntu-latest
    env:
      ZEROSTEP_TOKEN: ${{ secrets.ZEROSTEP_TOKEN }}
      GITHUB_REF: ${{ github.ref }}
      GITHUB_SHA: ${{ github.sha }}
      GITHUB_REPOSITORY: ${{ github.repository }}
      GITHUB_RUN_ID: ${{ github.run_id }}
      GITHUB_EVENT_NAME: ${{ github.event_name }}
    container:
      image: mcr.microsoft.com/playwright:v1.48.1-jammy
    timeout-minutes: 60
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: lts/*
      - name: Cache Node.js modules
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - name: Install Dependencies
        run: npm ci
      - name: Install Playwright Browsers
        run: npx playwright install --with-deps
      - name: Run UI Tests
        run: |
          export LOG_LEVEL="debug"
          export ZEROSTEP_TOKEN="${{ secrets.ZEROSTEP_TOKEN }}"
          npx playwright test --grep @UI --project=chromium || echo "UI Tests failed" >> test_failures.txt
      - name: Upload UI Test Report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: ui-playwright-report
          path: playwright-report/
          retention-days: 30
      - name: Upload Failed Test Artifacts
        uses: actions/upload-artifact@v4
        if: failure()
        with:
            name: ui-failed-test-artifacts
            path: path/to/failure/screenshots/
            retention-days: 30    

      # New Step to Generate Slack Message from JSON Report for UI Tests
      - name: Generate Slack Message for UI Tests
        run: |
          npx ts-node lib/slack_reporter.ts

      # Notify Slack for UI Test Results (dynamic message)
      - name: Notify Slack for UI Test Results
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_GREENKART_URL }}
          SLACK_CHANNEL: "#automate_greenkart_using_playwright_ts_api-run_report"
          SLACK_USERNAME: Playwright GitHub Actions
          SLACK_MESSAGE: |
            $(cat ./slack-message.txt)

  api-tests:
    name: Execute API Playwright Tests
    runs-on: ubuntu-latest
    env:
      GITHUB_REF: ${{ github.ref }}
      GITHUB_SHA: ${{ github.sha }}
      GITHUB_REPOSITORY: ${{ github.repository }}
      GITHUB_RUN_ID: ${{ github.run_id }}
      GITHUB_EVENT_NAME: ${{ github.event_name }}
    container:
      image: node:lts
    timeout-minutes: 60
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: lts/*
      - name: Cache Node.js modules
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - name: Install Dependencies
        run: npm ci
      - name: Run API Tests
        run: |
          npx playwright test --grep @API --project=chromium || echo "API Tests failed" >> test_failures.txt
      - name: Upload API Test Report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: api-playwright-report
          path: playwright-report/
          retention-days: 30
      - name: Upload Failed Test Artifacts
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: api-failed-test-artifacts
          path: path/to/failure/screenshots/
          retention-days: 30

      # New Step to Generate Slack Message from JSON Report for API Tests 
      - name: Generate Slack Message for API Tests 
        run: |
          node lib/slack_reporter.ts 

      # Check if slack-message.txt was created before notifying Slack
      - name: Check if Slack Message File Exists
        id: check_slack_message_file
        run: |
          if [ -f ./slack-message.txt ]; then
            echo "Slack message file exists."
            echo "exists=true" >> $GITHUB_ENV
          else
            echo "Slack message file does not exist."
            echo "exists=false" >> $GITHUB_ENV
          fi

      - name: Read Slack Message
        id: read_slack_message
        run: |
          run: |
          SLACK_MESSAGE=$(cat ./slack-message.txt)
          echo "::set-output name=message::$SLACK_MESSAGE"

      # Notify Slack for API Test Results (dynamic message)
      - name: Notify Slack for API Test Results 
        if: env.exists == 'true' # Only run this step if slack-message.txt exists.
        uses: rtCamp/action-slack-notify@v2 
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_GREENKART_URL }} 
          SLACK_CHANNEL: "#automate_greenkart_using_playwright_ts_api-run_report" 
          SLACK_USERNAME: Playwright GitHub Actions 
          SLACK_MESSAGE: ${{ steps.read_slack_message.outputs.message }}

  bdd-tests:
    name: Execute BDD Playwright Tests 
    runs-on: ubuntu-latest 
    env: 
      SECRET_KEY: ${{ secrets.SECRET_KEY }} 
    container:
      image: mcr.microsoft.com/playwright:v1.48.1-jammy 
    timeout-minutes: 60 
    steps:
      - uses: actions/checkout@v4 
      - uses: actions/setup-node@v4 
        with:
          node-version: lts/* 
      - name: Cache Node.js modules 
        uses: actions/cache@v4 
        with:
          path: ~/.npm 
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }} 
          restore-keys: |
            ${{ runner.os }}-node- 
      - name: Install Dependencies 
        run: npm ci 
      - name: Install Playwright Browsers 
        run: npx playwright install --with-deps 
      - name: Generate BDD Files 
        run: export ENV="ci" && npx bddgen --tags "@BDD" 
      - name: Check if BDD Features File Exists 
        run: |
          if [ -d ".features-gen/features" ]; then echo "Features directory exists"; else echo "Error: Features directory missing"; exit 1; fi  
      - name: Run BDD Tests  
        run: export ENV="ci" && npx playwright test --project=bdd_chromium || echo "BDD Tests failed" >> test_failures.txt  
      - name: Upload BDD Test Report  
        uses: actions/upload-artifact@v4  
        if: always()  
        with:
          name: bdd-playwright-report  
          path: playwright-report/  
          retention-days: 30  
      - name: Upload Failed BDD Test Artifacts
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: bdd-failed-test-artifacts
          path: path/to/failure/screenshots/
          retention-days: 30

      # New Step to Generate Slack Message from JSON Report for BDD Tests    
      - name: Generate Slack Message for BDD Tests   
        run: |
          npx ts-node lib/slack_reporter.ts    

      # Notify Slack for BDD Test Results (dynamic message)    
      - name: Notify Slack for BDD Test Results    
        uses: rtCamp/action-slack-notify@v2    
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_GREENKART_URL }}    
          SLACK_CHANNEL: "#automate_greenkart_using_playwright_ts_api-run_report"    
          SLACK_USERNAME: Playwright GitHub Actions    
          SLACK_MESSAGE: |
            $(cat ./slack-message.txt)

  # Final step to check for any failures across all test jobs  
  check-failures:
    runs-on: ubuntu-latest   
    needs: [ui-tests, api-tests, bdd-tests]   
    steps:
      - name: Check for Test Failures
        run: |
          if [ -f test_failures.txt ]; then
            echo "One or more test suites failed."
            exit 1
          else
            echo "All tests passed successfully."
          fi
